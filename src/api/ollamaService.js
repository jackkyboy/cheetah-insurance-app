const API_BASE = process.env.REACT_APP_API_BASE || "http://127.0.0.1:5000";

// üî∏ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
const allowedCompanies = [
  "‡∏ä‡∏±‡∏ö‡∏ö‡πå", "ERGO", "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢", "‡∏ß‡∏¥‡∏£‡∏¥‡∏¢‡∏∞",
  "AXA", "‡∏ó‡∏¥‡∏û‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢", "‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ô‡∏¥‡∏ä", "MSIG", "‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡∏°‡∏≤‡∏£‡∏µ‡∏ô",
];

// üß† ‡∏™‡πà‡∏á Prompt ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Ollama ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏é‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î
export async function askOllama(prompt) {
  const companyNote = `
[‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î]
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: ${allowedCompanies.join(", ")}  
‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°  
‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ ‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î  
‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏î ‡πÜ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î  
‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡∏à‡∏±‡∏ô (*), ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤, ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏î ‡πÜ
`.trim();

  const fullPrompt = `${prompt.trim()}\n${companyNote}`;

  try {
    const res = await fetch(`${API_BASE}/api/ollama/ask-ollama`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt: fullPrompt }),
    });

    if (!res.ok) throw new Error("Ollama API call failed");

    const data = await res.json();
    const rawReply = data?.response || "";
    const cleanReply = sanitizeOllamaReply(rawReply);
    console.log("üß† Ollama raw:", rawReply);
    console.log("‚úÖ Cleaned reply:", cleanReply);

    return cleanReply;
  } catch (err) {
    console.error("üî• Ollama Error:", err);
    return "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå";
  }
}

// üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏•‡∏≠‡∏° ‡πÄ‡∏ä‡πà‡∏ô 143,111 ‡∏´‡∏£‡∏∑‡∏≠ 35,000 - 45,000
export function detectFabricatedPremium(text) {
  const suspiciousComma = /\d{2,3},\d{3}/g;
  const rangePattern = /‡∏ø?\d{2,3},\d{3}\s*-\s*‡∏ø?\d{2,3},\d{3}/g;
  return suspiciousComma.test(text) || rangePattern.test(text) || /[0-9]{4,5}\s*‡∏ö‡∏≤‡∏ó/.test(text);
}

// üßº ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
export function sanitizeOllamaReply(text) {
  if (!text) return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö";

  const clean = text.trim();
  const hasMultipleLines = clean.split("\n").length > 1;
  const hasCommaList = clean.includes(",") && allowedCompanies.some(name => clean.includes(name));
  const hasBullet = clean.includes("*") || /^\d+\./.test(clean);
  const hasFakePrice = detectFabricatedPremium(clean);
  const hasMultipleCompanies = allowedCompanies.filter(name => clean.includes(name)).length > 1;

  if (
    hasMultipleLines ||
    hasCommaList ||
    hasBullet ||
    hasFakePrice ||
    hasMultipleCompanies
  ) {
    console.warn("‚ö†Ô∏è Ollama ‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡∏Å‡∏é ‚Äî ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'");
    return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö";
  }

  return clean;
}

// üßæ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Ollama ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à
export function parseOllamaToPackages(rawText, defaultType = "3+") {
  const companyMapping = {
    "‡∏ä‡∏±‡∏ö‡∏ö‡πå": "chubb",
    "ERGO": "ergo",
    "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢": "mti",
    "‡∏ß‡∏¥‡∏£‡∏¥‡∏¢‡∏∞": "viriyah",
    "AXA": "axa",
    "‡∏ó‡∏¥‡∏û‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢": "dhip",
    "‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ô‡∏¥‡∏ä": "kpi",
    "MSIG": "msig",
    "‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡∏°‡∏≤‡∏£‡∏µ‡∏ô": "tki",
  };

  const allowedCompanyNames = Object.keys(companyMapping);
  const lines = rawText.split("\n").filter((line) => line.trim());
  const results = [];

  for (const line of lines) {
    const match =
      line.match(/^(\d+)\.\s*([^\d:Ôºö]+?):?\s*(.+)$/) ||
      line.match(/^([^\d:Ôºö]+?):?\s*(.+)$/);

    if (!match) continue;

    const [, rawCompany, rawDesc] = match.length === 4 ? match.slice(1) : ["", ...match.slice(1)];
    const companyName = rawCompany.trim();
    const descriptionRaw = rawDesc?.trim() || "";

    // ‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ô‡∏≠‡∏Å whitelist
    if (!allowedCompanyNames.includes(companyName)) {
      console.warn("‚ùå ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå:", companyName);
      continue;
    }

    const code = companyMapping[companyName];
    if (!code || descriptionRaw.includes("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")) continue;

    const isFabricated = detectFabricatedPremium(descriptionRaw);
    if (isFabricated) {
      console.warn("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏≠‡∏á:", descriptionRaw);
      continue;
    }

    results.push({
      insurance_company: companyName,
      code,
      insurance_type: defaultType,
      net_premium_range: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
      description: descriptionRaw,
      flagged_fake_price: false,
    });
  }

  return results;
}

