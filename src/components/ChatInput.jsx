// /Users/apichet/Downloads/cheetah-insurance-app/src/components/ChatInput.jsx
import React, { useState } from "react";
import { fetchGalleryPackages } from "../api/gallery";
import { parseInsuranceQuery } from "../utils/nlp";
import { askOllama } from "../api/ollamaService";

const ChatInput = ({ onSend, onBotResponse }) => {
  const [input, setInput] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    const userText = input.trim();
    if (!userText) return;

    onSend?.({ sender: "user", text: userText });
    setInput("");

    try {
      const query = parseInsuranceQuery(userText);
      const isComplete = query.brand && query.model && query.year && query.insurance_type;

      if (isComplete) {
        onBotResponse?.({
          sender: "bot",
          text: "üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö...",
        });

        const results = await fetchGalleryPackages(query);

        if (results.length > 0) {
          onBotResponse?.({
            sender: "bot",
            text: `‚úÖ ‡∏û‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üëá`,
            packages: results,
          });
        } else {
          onBotResponse?.({
            sender: "bot",
            text: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∏‡πà‡∏ô/‡∏õ‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö üôè",
          });
        }

        return; // üõë ‡∏´‡πâ‡∏≤‡∏° fallback ‡πÑ‡∏õ Ollama ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î
      }

      // üß† ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‚Äù
      const reply = await askOllama(userText);
      onBotResponse?.({
        sender: "bot",
        text: reply || "‚ö†Ô∏è ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ",
      });

    } catch (err) {
      console.error("‚ùå Error in ChatInput:", err);
      onBotResponse?.({
        sender: "bot",
        text: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö üòì",
      });
    }
  };

  return (
    <form className="typing-form" onSubmit={handleSubmit}>
      <div className="input-wrapper">
        <input
          type="text"
          className="typing-input"
          placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
          required
        />
        <button className="icon material-symbols-rounded" type="submit">
          send
        </button>
      </div>
    </form>
  );
};

export default ChatInput;
