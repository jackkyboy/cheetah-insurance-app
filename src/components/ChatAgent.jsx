// /Users/apichet/Downloads/cheetah-insurance-app/src/components/ChatAgent.jsx
import React, { useState, useEffect, useRef } from "react";
import "../assets/styles/chatagent.css";
import MessageBubble from "./MessageBubble";
import SuggestionList from "./SuggestionList";
import ChatInput from "./ChatInput";

import {
  askOllama,
  parseOllamaToPackages,
  detectFabricatedPremium,
} from "../api/ollamaService";
import { fetchPackagesWithLogos as fetchGalleryPackages } from "../api/api";
import { parseInsuranceQuery } from "../utils/nlp";


const ChatAgent = () => {
  const [messages, setMessages] = useState([]);
  const [theme, setTheme] = useState("light");
  const chatEndRef = useRef(null);

  const scrollToBottom = () => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleThemeToggle = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    document.body.classList.toggle("light_mode", newTheme === "light");
    setTheme(newTheme);
  };

  const handleUserSend = async (msg) => {
    setMessages((prev) => [...prev, msg]);
  
    // üß† 1. ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Ollama ‡∏Å‡πà‡∏≠‡∏ô
    const ollamaText = await askOllama(msg.text);
    const parsedPackages = parseOllamaToPackages(ollamaText);
    const hasFake = parsedPackages.some((p) => p.flagged_fake_price);
  
    // üß† 2. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI
    setMessages((prev) => [
      ...prev,
      {
        sender: "bot",
        text: hasFake
          ? "Ollama ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‚Äî ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö"
          : "Ollama ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚Äî ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
        packages: parsedPackages,
      },
    ]);
  
    // ‚úÖ 3. ‡πÅ‡∏¢‡∏Å intent ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á
    const parsedIntent = parseInsuranceQuery(msg.text);
  
    // üõ°Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡πÑ‡∏´‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏¥‡∏á API
    if (!parsedIntent.brand || !parsedIntent.model || !parsedIntent.year || !parsedIntent.insurance_type) {
      setMessages((prev) => [
        ...prev,
        {
          sender: "bot",
          text: "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ ‡∏£‡∏∏‡πà‡∏ô ‡∏õ‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö",
        },
      ]);
      return;
    }
  
    try {
      const realPackages = await fetchGalleryPackages({
        brand: parsedIntent.brand,
        model: parsedIntent.model,
        year: parsedIntent.year,
        type: parsedIntent.insurance_type,
        limit: 3,
        offset: 0,
      });
  
      if (Array.isArray(realPackages) && realPackages.length > 0) {
        setMessages((prev) => [
          ...prev,
          {
            sender: "bot",
            text: "‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á:",
            packages: realPackages,
          },
        ]);
      } else {
        setMessages((prev) => [
          ...prev,
          {
            sender: "bot",
            text: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö",
          },
        ]);
      }
    } catch (err) {
      console.error("üî• fetchGalleryPackages error", err);
      setMessages((prev) => [
        ...prev,
        {
          sender: "bot",
          text: "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á",
        },
      ]);
    }
  };
  
  

  return (
    <div className="chat-container">
      {/* ‚úÖ Header */}
      <header className="header">
        <h1 className="title">‡∏û‡∏µ‡πà‡πÄ‡∏™‡∏∑‡∏≠‡∏ä‡∏µ‡∏ï‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠</h1>
        <p className="subtitle">‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</p>
        <SuggestionList
          onSelect={(msg) => handleUserSend({ sender: "user", text: msg })}
        />
      </header>

      {/* ‚úÖ Chat Body */}
      <div className="chat-list">
        {messages.map((msg, index) => (
          <MessageBubble
            key={index}
            sender={msg.sender}
            text={msg.text}
            packages={msg.packages}
          />
        ))}
        <div ref={chatEndRef} />
      </div>

      {/* ‚úÖ Chat Input */}
      <ChatInput onSend={handleUserSend} />

      {/* ‚úÖ Footer Actions */}
      <div className="chat-actions">
        <span className="icon material-symbols-rounded" onClick={handleThemeToggle}>
          {theme === "light" ? "dark_mode" : "light_mode"}
        </span>
        <span className="icon material-symbols-rounded" onClick={() => setMessages([])}>
          delete
        </span>
        <p className="disclaimer-text">
          ‡∏û‡∏µ‡πà‡πÄ‡∏™‡∏∑‡∏≠‡∏ä‡∏µ‡∏ï‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 100% ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏ç‡∏≤‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        </p>
      </div>
    </div>
  );
};

export default ChatAgent;
