// src/pages/UploadedDocumentsPage.jsx
import React, { useEffect, useState } from "react";
import { fetchCustomerDocuments } from "../api/documentService";
import "../assets/styles/UploadDocument.css";

const DOCUMENT_LABELS = {
  identity_card: "‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ",
  driver_license_owner: "‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ",
  car_registration: "‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå",
  current_policy: "‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Å‡∏£‡∏°‡∏ò‡∏£‡∏£‡∏°‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
  renewal_reminder: "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô",
  driver_license: "‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà",
};

const REQUIRED_DOC_TYPES = Object.keys(DOCUMENT_LABELS);

const UploadedDocumentsPage = () => {
  const [documents, setDocuments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAll, setShowAll] = useState(false);
  const customerId = localStorage.getItem("customer_id");

  // üì¶ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏î‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
  const buildFullDocumentList = (rawDocs = []) => {
    const latestDocsMap = {};
    for (const doc of rawDocs) {
      const { document_type, uploaded_at } = doc;
      if (
        !latestDocsMap[document_type] ||
        new Date(uploaded_at) > new Date(latestDocsMap[document_type].uploaded_at)
      ) {
        latestDocsMap[document_type] = doc;
      }
    }
  
    return REQUIRED_DOC_TYPES.map((type) => {
      const found = latestDocsMap[type];
      return found
        ? found // üü¢ ‡πÉ‡∏ä‡πâ status ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å database ‡πÄ‡∏ä‡πà‡∏ô 'verified', 'rejected'
        : { document_type: type, status: "missing" };
    });
  };
  

  useEffect(() => {
    const load = async () => {
      try {
        const result = await fetchCustomerDocuments(customerId);
        const enriched = buildFullDocumentList(result);
        setDocuments(enriched);
      } catch (e) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", e.message);
        setDocuments([]);
      } finally {
        setLoading(false);
      }
    };

    if (customerId) load();
  }, [customerId]);

  const formatDate = (raw) => {
    if (!raw) return "-";
    const d = new Date(raw);
    return d.toLocaleDateString("th-TH", {
      day: "numeric",
      month: "short",
      year: "numeric",
    });
  };

  return (
    <div className="upload-documents-page">
      <h2 className="page-title">üìÅ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h2>

      {loading ? (
        <div className="loading">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
      ) : documents.length === 0 ? (
        <div className="no-documents">üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</div>
      ) : (
        <>
          <div className="document-list">
            {(showAll ? documents : documents.slice(0, 3)).map((doc, i) => (
              <div key={i} className={`doc-card ${doc.status}`}>
                <div className="doc-card-icon">üìÑ</div>

                <div className="doc-card-info">
                  <div className="doc-card-title">
                    {DOCUMENT_LABELS[doc.document_type] || doc.document_type}
                  </div>
                </div>

                <div className="doc-card-status">
                  {doc.status === "missing" ? (
                    <span className="status-missing">‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î</span>
                  ) : (
                    <>
                      <span className={`status-${doc.status}`}>
                        {doc.status === "verified" && "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß"}
                        {doc.status === "uploaded" && "‚úî ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß"}
                        {doc.status === "rejected" && "üö´ ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"}
                        {!["verified", "uploaded", "rejected"].includes(doc.status) && "üìå ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"}
                      </span>
                      <br />
                      <small>{formatDate(doc.uploaded_at)}</small>
                    </>
                  )}
                </div>

              </div>
            ))}
          </div>

          {documents.length > 3 && (
            <div className="toggle-wrapper">
              <button className="toggle-button" onClick={() => setShowAll(!showAll)}>
                {showAll ? "üîΩ ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" : "üîº ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"}
              </button>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default UploadedDocumentsPage;
