// /Users/apichet/Downloads/cheetah-insurance-app/src/components/package_gallery.jsx
// ‚úÖ /Users/apichet/Downloads/cheetah-insurance-app/src/components/PackageGallery.jsx
import React, { useEffect, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { fetchGalleryPackages, fetchCarModels, fetchModelYears } from "../api/gallery";
import { FixedSizeList as List } from "react-window";
import InfiniteLoader from "react-window-infinite-loader";
import "../assets/styles/gallery.css";
import DeconstructedCarousel from "./DeconstructedCarousel";


// ‚úÖ ALL_BRANDS ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
export const ALL_BRANDS = [
  "AC", "AIRSTREAM", "ALFA", "ALFA ROMEO", "ASTON MARTIN", "AUDI",
  "BENTLEY", "BMW", "BRABUS", "BYD", "CADILLAC", "CHERY", "CHEVROLET",
  "CHRYSLER", "CITROEN", "DAEWOO", "DAIHATSU", "DFM", "DFSK", "DONGFENG",
  "FERRARI", "FIAT", "FOMM", "FORD", "FOTON", "GWM TANK", "HAVAL",
  "HOLDEN", "HONDA", "HUMMER", "HYUNDAI", "ISUZU", "JAGUAR", "JEEP",
  "JONWAY", "KIA", "LAMBORGHINI", "LAND ROVER", "LEXUS", "LOTUS",
  "MASERATI", "MAXUS", "MAZDA", "MCLAREN", "MERCEDES-BENZ", "MG", "MINI",
  "MITSUBISHI", "MITSUOKA", "NAZA", "NETA", "NISSAN", "OPEL", "ORA",
  "PEUGEOT", "PORSCHE", "PROTON", "RANGE ROVER", "RENAULT", "ROLLSROYCE",
  "ROVER", "SAAB", "SEAT", "SKODA", "SOKON", "SSANGYONG", "SUBARU",
  "SUZUKI", "TATA", "TESLA", "THAI RUNG", "THAIRUNG", "TOYOTA", "TR",
  "VOLKSWAGEN", "VOLT", "VOLVO"
];

const TOP_BRANDS = [
  "TOYOTA", "ISUZU", "HONDA", "NISSAN", "FORD",
  "MAZDA", "MITSUBISHI", "CHEVROLET", "MERCEDES-BENZ", "TR"
];

const COMPANY_INFO = {
  "chubb": {
    name: "‡∏ä‡∏±‡∏ö‡∏ö‡πå",
    logo: "/gallery_logos/partners/CHUBB-logo.svg",
  },
  "ergo": {
    name: "ERGO",
    logo: "/gallery_logos/partners/ERGO-logo.svg",
  },
  "mti": {
    name: "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢",
    logo: "/gallery_logos/partners/MTI-logo.svg",
  },
  "viriyah": {
    name: "‡∏ß‡∏¥‡∏£‡∏¥‡∏¢‡∏∞",
    logo: "/gallery_logos/partners/VIRIYAH-logo.svg",
  },
  "axa": {
    name: "AXA",
    logo: "/gallery_logos/partners/AXA-logo.svg",
  },
  "dhip": {
    name: "‡∏ó‡∏¥‡∏û‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢",
    logo: "/gallery_logos/partners/DHIP-logo.svg",
  },
  "kpi": {
    name: "‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ô‡∏¥‡∏ä",
    logo: "/gallery_logos/partners/KPI-logo.svg",
  },
  "msig": {
    name: "MSIG",
    logo: "/gallery_logos/partners/MSIG-logo.svg",
  },
  "tki": {
    name: "‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡∏°‡∏≤‡∏£‡∏µ‡∏ô",
    logo: "/gallery_logos/partners/TKI-logo.svg",
  },
  "fal": {
    name: "‡∏ü‡∏≠‡∏•‡∏Ñ‡∏≠‡∏ô",
    logo: "/gallery_logos/partners/FAL-logo.svg",
  },
};

const PackageGallery = () => {
  const limit = 30; // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏Ñ‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

  const [expandedIndex, setExpandedIndex] = useState(null);
  const [viewMode, setViewMode] = useState("infinite");
  const [packages, setPackages] = useState([]);
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(0);
  const [isLoading, setIsLoading] = useState(false);

  const [selectedBrand, setSelectedBrand] = useState(null);
  const [selectedType, setSelectedType] = useState(null);
  const [selectedModel, setSelectedModel] = useState(null);
  const [selectedYear, setSelectedYear] = useState(null);
  const [selectedCompany, setSelectedCompany] = useState(null);

  const [models, setModels] = useState([]);
  const [years, setYears] = useState([]);

  const enrichCompanyInfo = (pkg) => {
    const raw = (pkg.insurance_company || "").trim().toLowerCase();
    const matched = Object.keys(COMPANY_INFO).find((key) =>
      raw.includes(key.toLowerCase())
    );

    if (matched) {
      return {
        ...pkg,
        company_full_name: COMPANY_INFO[matched].name,
        company_logo: COMPANY_INFO[matched].logo,
      };
    }

    return {
      ...pkg,
      company_full_name: pkg.insurance_company || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó",
      company_logo: "/gallery_logos/partners/default-logo.svg",
    };
  };

  const getCompanyCodeByName = (name) => {
    const entry = Object.entries(COMPANY_INFO).find(([, val]) => val.name === name);
    return entry ? entry[0] : null;
  };


  const fetchData = async (currentPage = 0, reset = false) => {
    if (isLoading) return;
    setIsLoading(true);
  
    try {
      const offset = currentPage * limit;
  
      const companyName = selectedCompany
        ? COMPANY_INFO[selectedCompany]?.name
        : null;
  
      // ‚úÖ Debug Parameters ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏¥‡∏á API
      console.log("üîç Fetching packages with params:", {
        brand: selectedBrand,
        model: selectedModel,
        year: selectedYear,
        type: selectedType,
        company: companyName,
        limit,
        offset,
      });
  
      const res = await fetchGalleryPackages({
        brand: selectedBrand,
        model: selectedModel,
        year: selectedYear,
        type: selectedType,
        company: companyName,
        limit,
        offset,
      });
  
      const enriched = Array.isArray(res) ? res.map(enrichCompanyInfo) : [];
  
      // ‚úÖ Debug Response ‡∏à‡∏≤‡∏Å API
      console.log("üì¶ API Response:", res);
      console.log("‚ú® Enriched Packages:", enriched);
  
      if (reset) {
        setPackages(enriched);
        setPage(1);
        console.log("üì¶ Reset packages:", enriched);
      } else {
        const combined = [...packages, ...enriched];
        setPackages(combined);
        setPage((prev) => prev + 1);
        console.log("üì¶ Appended packages:", combined);
      }
  
      setHasMore(enriched.length === limit);
    } catch (err) {
      console.error("‚ùå fetch error:", err);
    } finally {
      setIsLoading(false);
    }
  };
  
  

  const loadMoreItems = () => {
    if (!hasMore || isLoading) return;
    fetchData(page);
  };

  const isItemLoaded = (index) => !hasMore || index < packages.length;

  useEffect(() => {
    setPackages([]);
    setPage(0);
    setHasMore(true);
    fetchData(0, true);
  }, [selectedBrand, selectedType, selectedModel, selectedYear, selectedCompany]);

  useEffect(() => {
    if (!selectedBrand) {
      setModels([]);
      setSelectedModel(null);
      return;
    }
    fetchCarModels(selectedBrand).then(setModels).catch(console.error);
  }, [selectedBrand]);

  useEffect(() => {
    if (!selectedModel || !selectedBrand) {
      setYears([]);
      setSelectedYear(null);
      return;
    }
    fetchModelYears(selectedBrand, selectedModel).then(setYears).catch(console.error);
  }, [selectedModel, selectedBrand]);

  const getCompanyDisplay = (pkg) => {
    return {
      name:
        pkg.company_full_name ||
        COMPANY_INFO[pkg.insurance_company_code]?.name ||
        pkg.insurance_company ||
        "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó",
      logo:
        pkg.company_logo ||
        COMPANY_INFO[pkg.insurance_company_code]?.logo ||
        "/gallery_logos/partners/default-logo.svg",
    };
  };

  const Row = ({ index, style }) => {
    const pkg = packages[index];
    const navigate = useNavigate();
  
    if (!pkg) return null;
  
    console.log("üß© Row rendering:", pkg);
  
    const enrichedPkg = enrichCompanyInfo(pkg);
    const { name: companyName, logo: logoSrc } = getCompanyDisplay(enrichedPkg);
  
    return (
      <div style={{ ...style, padding: "10px" }}>
        <div className="gallery-card cheetah-gradient d-flex flex-column justify-between h-100">
          
          {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó + ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à) */}
          <div className="flex-grow-1">
            <div className="d-flex align-items-center mb-2">
              <img
                src={logoSrc}
                alt={companyName}
                style={{
                  width: "32px",
                  height: "32px",
                  objectFit: "contain",
                  marginRight: "12px",
                  background: "#fff",
                  borderRadius: "50%",
                  padding: "4px"
                }}
                onError={(e) => {
                  e.target.onerror = null;
                  e.target.src = "/gallery_logos/partners/default-logo.svg";
                }}
              />
              <h5 className="gallery-card-title m-0">{companyName}</h5>
            </div>
  
            <div className="mb-2 small">
              ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: <strong>{enrichedPkg.insurance_type || "-"}</strong> ‚Ä¢ {enrichedPkg.repair_type || "-"}
            </div>
  
            <ul className="list-unstyled small mb-2">
              <li>üöó <strong>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠:</strong> {enrichedPkg.car_brand || "-"}</li>
              <li>üìÜ <strong>‡∏õ‡∏µ‡∏£‡∏ñ:</strong> {enrichedPkg.car_model_year || "-"}</li>
              <li>üî¢ <strong>‡∏£‡∏∏‡πà‡∏ô:</strong> {enrichedPkg.car_model || "-"} / {enrichedPkg.car_submodel || "-"}</li>
              <li>
                üí∞ <strong>‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏£‡∏ß‡∏°:</strong>{" "}
                <span className="fw-bold">
                  {enrichedPkg.premium ? parseFloat(enrichedPkg.premium).toLocaleString() : "N/A"} ‡∏ö‡∏≤‡∏ó
                </span>
              </li>
            </ul>
          </div>
  
          {/* üîΩ ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î - ‡∏≠‡∏¢‡∏π‡πà‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠ */}
          <div className="text-center mt-auto">
            <button
              className="gallery-btn-details"
              onClick={() =>
                navigate(`/package/${enrichedPkg.package_code}`, {
                  state: { packageData: enrichedPkg },
                })
              }
            >
              üìÑ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            </button>
          </div>
  
        </div>
      </div>
    );
  };
  
  
  
  
  
  return (
    <div className="gallery-container">
      <h2 className="gallery-heading">üõ°Ô∏è ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h2>
  
      {/* üîΩ Filters */}
      <div className="gallery-filters mb-4 row g-3">
        {/* ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ */}
        <div className="col-md-3">
          <label className="form-label">‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠</label>
          <select
            className="form-select"
            value={selectedBrand || ""}
            onChange={(e) => setSelectedBrand(e.target.value || null)}
          >
            <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
            {ALL_BRANDS.map((brand) => (
              <option key={brand} value={brand}>
                {brand}
              </option>
            ))}
          </select>
        </div>
  
        {/* ‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ */}
        <div className="col-md-3">
          <label className="form-label">‡∏£‡∏∏‡πà‡∏ô</label>
          <select
            className="form-select"
            value={selectedModel || ""}
            onChange={(e) => setSelectedModel(e.target.value || null)}
            disabled={!models.length}
          >
            <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
            {models.map((model) => (
              <option key={model} value={model}>
                {model}
              </option>
            ))}
          </select>
        </div>
  
        {/* ‡∏õ‡∏µ */}
        <div className="col-md-2">
          <label className="form-label">‡∏õ‡∏µ</label>
          <select
            className="form-select"
            value={selectedYear || ""}
            onChange={(e) => setSelectedYear(e.target.value || null)}
            disabled={!years.length}
          >
            <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
            {years.map((year) => (
              <option key={year} value={year}>
                {year}
              </option>
            ))}
          </select>
        </div>
  
        {/* ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô */}
        <div className="col-md-2">
          <label className="form-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô</label>
          <select
            className="form-select"
            value={selectedType || ""}
            onChange={(e) => setSelectedType(e.target.value || null)}
          >
            <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
            <option value="1">‡∏ä‡∏±‡πâ‡∏ô 1</option>
            <option value="2+">2+</option>
            <option value="2">2</option>
            <option value="3+">3+</option>
            <option value="3">3</option>
          </select>
        </div>
  
        {/* ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô */}
        <div className="col-md-2">
          <label className="form-label">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô</label>
          <select
            className="form-select"
            value={selectedCompany || ""}
            onChange={(e) => setSelectedCompany(e.target.value || null)}
          >
            <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
            {Object.entries(COMPANY_INFO).map(([code, info]) => (
              <option key={code} value={code}>
                {info.name}
              </option>
            ))}
          </select>
        </div>
      </div>
  
      {/* üîÅ ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á */}
      <div className="view-toggle-buttons mb-4">
        <span className="fw-bold mb-2 me-2">‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö:</span>
        <div className="d-flex gap-2 flex-wrap">
          <button
            type="button"
            className={`filter-btn ${viewMode === "infinite" ? "active" : ""}`}
            onClick={() => setViewMode("infinite")}
          >
            üîÅ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
          </button>
          <button
            type="button"
            className={`filter-btn ${viewMode === "carousel" ? "active" : ""}`}
            onClick={() => setViewMode("carousel")}
          >
            üé† ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö 3D
          </button>
        </div>
      </div>


      {/* üîΩ ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à */}
      {packages.length === 0 && !isLoading ? (
        <div className="text-center py-5 text-muted">
          <p>üò• ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</p>
        </div>
      ) : viewMode === "infinite" ? (
        <InfiniteLoader
          isItemLoaded={isItemLoaded}
          itemCount={hasMore ? packages.length + 1 : packages.length}
          loadMoreItems={loadMoreItems}
        >
          {({ onItemsRendered, ref }) => (
            <List
              height={window.innerWidth < 768 ? 500 : 600}            // üîÅ Responsive ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
              itemSize={window.innerWidth < 768 ? 220 : 250}          // üîÅ Responsive ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              itemCount={packages.length}
              width={"100%"}
              onItemsRendered={onItemsRendered}
              ref={ref}
            >
              {Row}
            </List>
          )}
        </InfiniteLoader>
      ) : (
        <DeconstructedCarousel packages={packages} />
      )}


    </div>
  );
  
  

  
};

export default PackageGallery;

