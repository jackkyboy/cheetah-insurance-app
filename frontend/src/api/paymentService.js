/*/Users/apichet/Downloads/cheetah-insurance-app/src/api/paymentService.js */
import axios from "./axios";
import jwtDecode from "jwt-decode";

// üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö
const validatePayload = (payload, requiredFields) => {
  const missing = requiredFields.filter(
    (field) => !payload[field] || payload[field] === ""
  );
  if (missing.length > 0) {
    throw new Error(`Missing required fields: ${missing.join(", ")}`);
  }
};

// üîê Decode JWT ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
const decodeJwtPayload = (token) => {
  try {
    const decoded = jwtDecode(token);
    console.debug("üß† Decoded JWT:", decoded);
    return decoded;
  } catch (err) {
    console.error("‚ùå Failed to decode JWT:", err);
    throw new Error("JWT format ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  }
};

// üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞ redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á 2C2P
// üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞ redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á 2C2P
export const createPaymentOrder = async (payload) => {
  try {
    validatePayload(payload, ["customer_id", "amount", "currency"]);

    const res = await axios.post("/payments/create", payload);
    const raw = res?.data;
    console.debug("üì¶ Raw backend response:", raw);

    const jwtString = raw?.payload;

    if (typeof jwtString !== "string") {
      console.error("‚ö†Ô∏è payload is not a string:", jwtString);
      throw new Error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå");
    }

    // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô JWT ‡πÅ‡∏ö‡∏ö 3 ‡∏™‡πà‡∏ß‡∏ô
    const parts = jwtString.split(".");
    if (parts.length !== 3) {
      console.error("‚ö†Ô∏è JWT format is invalid:", jwtString);
      throw new Error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå");
    }

    const decoded = decodeJwtPayload(jwtString);

    // ‚úÖ ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å field ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    const redirectUrl = decoded?.webPaymentUrl || decoded?.web_payment_url || decoded?.paymentUrl || decoded?.url;

    if (!redirectUrl || typeof redirectUrl !== "string" || !redirectUrl.startsWith("http")) {
      console.error("‚ùå URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirect ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô JWT:", decoded);
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô JWT ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤");
    }

    console.info("üîó Redirecting user to:", redirectUrl);
    window.location.href = redirectUrl;

    return raw;
  } catch (error) {
    const errMsg = error?.response?.data?.error || error.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ";
    console.error("‚ùå [createPaymentOrder]", errMsg);
    throw new Error(errMsg);
  }
};



// üì¶ ‡∏î‡∏∂‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
export const fetchPaymentOptions = async (paymentToken) => {
  try {
    if (!paymentToken) throw new Error("Payment token is required.");
    const res = await axios.post("/payments/options", { payment_token: paymentToken });
    return res.data;
  } catch (error) {
    const errMsg = error?.response?.data?.error || error.message;
    console.error("‚ùå [fetchPaymentOptions]", errMsg);
    throw new Error(errMsg);
  }
};

// üìÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
export const getPaymentStatus = async (orderId) => {
  try {
    if (!orderId) throw new Error("Order ID is required.");
    const res = await axios.get(`/payments/status/${orderId}`);
    return res.data;
  } catch (error) {
    const errMsg = error?.response?.data?.error || error.message;
    console.error("‚ùå [getPaymentStatus]", errMsg);
    throw new Error(errMsg);
  }
};

// üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö manual
export const generatePaymentUrl = async (payload) => {
  try {
    validatePayload(payload, ["amount", "order_id"]);
    const res = await axios.post("/payments/generate-url", payload);
    const url = res?.data?.paymentUrl;
    if (!url) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö Payment URL ‡πÉ‡∏ô response.");
    return url;
  } catch (error) {
    const errMsg = error?.response?.data?.error || error.message;
    console.error("‚ùå [generatePaymentUrl]", errMsg);
    throw new Error(errMsg);
  }
};
