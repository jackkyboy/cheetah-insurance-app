# /Users/apichet/Downloads/cheetah-insurance-app/backend/utils/jwt_utils.py
import jwt
import time  # ‡πÉ‡∏ä‡πâ time.time() ‡πÅ‡∏ó‡∏ô datetime.utcnow().timestamp()
import json
from datetime import datetime, timedelta
import logging
from backend.config.config import Config
from backend.models.Users import Users
from backend.models.Admins import Admins


# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(level=Config.LOG_LEVEL)
logger = logging.getLogger(__name__)

# ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ô‡∏≤‡∏ó‡∏µ (300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
ALLOWED_TIME_DRIFT = 300

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ JWT_SECRET_KEY ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
if not Config.JWT_SECRET_KEY:
    logger.error("‚ùå JWT_SECRET_KEY is not set! Please check your environment variables.")
    raise ValueError("JWT_SECRET_KEY is not configured.")



# /Users/apichet/Downloads/cheetah-insurance-app/backend/utils/jwt_utils.py
# /Users/apichet/Downloads/cheetah-insurance-app/backend/utils/jwt_utils.py

def generate_jwt(payload, secret=None, expires_in_minutes=None):
    """
    Generate JWT Token ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ identity ‡πÄ‡∏õ‡πá‡∏ô dict ‡πÄ‡∏™‡∏°‡∏≠
    """
    if not payload:
        raise ValueError("Payload cannot be None or empty.")

    secret = secret or Config.JWT_SECRET_KEY

    # ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö config ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ
    raw_exp = Config.JWT_ACCESS_TOKEN_EXPIRES
    expires_in_minutes = expires_in_minutes or (raw_exp if raw_exp <= 120 else raw_exp // 60)

    user_id = payload.get("user_id")
    admin_id = payload.get("admin_id")
    if not user_id and not admin_id:
        raise ValueError("Payload must include 'user_id' or 'admin_id'.")

    identity = {"user_id": user_id, "admin_id": admin_id} if admin_id else {"user_id": user_id}

    now = datetime.utcnow()
    payload.update({
        "identity": identity,
        "sub": str(admin_id) if admin_id else str(user_id),
        "exp": int((now + timedelta(minutes=expires_in_minutes)).timestamp()),
        "iat": int(now.timestamp()),
        "nbf": int(now.timestamp())
    })

    try:
        token = jwt.encode(payload, secret, algorithm="HS256")
        return token
    except Exception as e:
        raise ValueError(f"Error generating JWT: {e}")





def decode_jwt(token, secret=None, verify_exp=True):
    """
    Decode JWT token ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á payload
    """
    secret = secret or Config.JWT_SECRET_KEY

    if not token:
        logger.error("‚ùå No token provided for decoding.")
        raise ValueError("No token provided")

    try:
        # ‡πÅ‡∏™‡∏î‡∏á token (‡πÅ‡∏ï‡πà truncate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
        logger.debug(f"üîç [decode_jwt] Attempting to decode token: {token[:10]}... (truncated)")

        # Decode JWT
        decoded_token = jwt.decode(
            token, 
            secret, 
            algorithms=["HS256"], 
            options={"verify_exp": verify_exp}
        )

        # ‚úÖ ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ decoded_token ‡πÄ‡∏õ‡πá‡∏ô JSON string ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if isinstance(decoded_token, str):
            decoded_token = json.loads(decoded_token)

        logger.debug(f"‚úÖ [decode_jwt] Token Decoded Successfully: {decoded_token}")

        # ‡πÉ‡∏ä‡πâ time.time() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô UNIX timestamp
        now = time.time()
        exp = decoded_token.get("exp")
        iat = decoded_token.get("iat")
        nbf = decoded_token.get("nbf")

        logger.warning(f"üìå [DEBUG] Now: {datetime.utcfromtimestamp(now)}, Allowed Drift: {ALLOWED_TIME_DRIFT}s")

        if exp and exp < now - ALLOWED_TIME_DRIFT:
            logger.warning(f"‚ùå Token expired at {datetime.utcfromtimestamp(exp)}")
            raise ValueError("Token has expired")

        if iat and iat > now + ALLOWED_TIME_DRIFT:
            logger.warning(f"‚ö†Ô∏è Token issued in the future at {datetime.utcfromtimestamp(iat)}")
            raise ValueError("Token issue time is incorrect")

        if nbf and nbf > now + ALLOWED_TIME_DRIFT:
            logger.warning(f"‚ö†Ô∏è Token not valid before {datetime.utcfromtimestamp(nbf)}")
            raise ValueError("Token is not yet valid")

        # ‚úÖ ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Missing user_id / admin_id
        user_id = decoded_token.get("user_id")
        admin_id = decoded_token.get("admin_id")

        if not user_id and not admin_id and "sub" in decoded_token:
            if decoded_token.get("role") == "admin":
                admin_id = int(decoded_token["sub"])
            else:
                user_id = int(decoded_token["sub"])

        # ‚ùå ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ user_id/admin_id ‡∏≠‡∏¢‡∏π‡πà‡∏î‡∏µ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ Token ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        if not user_id and not admin_id:
            logger.error(f"‚ùå [decode_jwt] Missing user_id/admin_id in token: {decoded_token}")
            raise ValueError("Invalid token payload: Missing user_id or admin_id")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role
        if "role" not in decoded_token:
            decoded_token["role"] = "admin" if admin_id else "user"

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email
        if "email" not in decoded_token:
            user = Admins.query.get(admin_id) if admin_id else Users.query.get(user_id)
            if user:
                decoded_token["email"] = user.email
                logger.info(f"üìß [decode_jwt] Retrieved missing email from DB: {user.email}")
            else:
                logger.error("‚ùå [decode_jwt] Missing email in token and DB lookup failed")
                raise ValueError("Invalid token payload: Missing email")

        return decoded_token

    except jwt.ExpiredSignatureError:
        logger.warning("‚ùå Token has expired.")
        raise ValueError("Token has expired")

    except jwt.DecodeError:
        logger.warning("‚ùå Token decoding failed.")
        raise ValueError("Token decoding failed")

    except jwt.InvalidTokenError as e:
        logger.warning(f"‚ùå Invalid token: {e}")
        raise ValueError("Invalid token")

    except Exception as e:
        logger.exception(f"‚ùå Unexpected error while decoding JWT: {e}")
        raise ValueError("An unexpected error occurred while decoding JWT")

def is_token_expired(token, secret=None):
    """
    Check if the token is expired without raising an exception.
    """
    try:
        decode_jwt(token, secret)
        return False
    except ValueError as e:
        if "expired" in str(e).lower():
            return True
        raise
# /Users/apichet/Downloads/cheetah-insurance-app/backend/utils/jwt_utils.py
def generate_refresh_token(user_id=None, admin_id=None, email=None, role=None, secret=None, expires_in_days=7):
    """
    Generate a Refresh JWT token with a longer expiration time.
    """
    secret = secret or Config.JWT_SECRET_KEY
    payload = {}

    logger.debug(f"üîç [generate_refresh_token] user_id={user_id}, admin_id={admin_id}, email={email}, role={role}")

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ `user_id` ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î `user_id = admin_id`
    if admin_id and not user_id:
        user_id = admin_id

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `user_id` ‡πÄ‡∏õ‡πá‡∏ô Integer
    if not isinstance(user_id, int):
        logger.error(f"‚ùå [generate_refresh_token] Invalid user_id: {user_id} (Expected integer)")
        raise ValueError("Invalid user_id format")

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Database
    user = Admins.query.get(admin_id) if admin_id else Users.query.get(user_id)
    if not user:
        logger.error(f"‚ùå [generate_refresh_token] User/Admin not found. admin_id={admin_id}, user_id={user_id}")
        raise ValueError("Invalid user or admin credentials.")

    # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Email ‡πÅ‡∏•‡∏∞ Role
    if not email:
        email = user.email
    if not role:
        role = "admin" if admin_id else "user"

    # ‚úÖ **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ**: ‡πÉ‡∏´‡πâ `user_id` ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
    payload.update({
        "user_id": user_id,  # üî• ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ user_id ‡πÄ‡∏™‡∏°‡∏≠
        "admin_id": admin_id if admin_id else None,  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô user ‡∏õ‡∏Å‡∏ï‡∏¥ admin_id ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô None
        "sub": str(user_id),  # ‚úÖ ‡πÉ‡∏ä‡πâ user_id ‡πÄ‡∏õ‡πá‡∏ô sub
        "role": role,
        "email": email,
        "exp": datetime.utcnow() + timedelta(days=expires_in_days),
        "iat": datetime.utcnow(),
        "nbf": datetime.utcnow()
    })

    try:
        logger.debug(f"üîç [generate_refresh_token] Payload before encoding: {payload}")
        token = jwt.encode(payload, secret, algorithm="HS256")
        logger.debug(f"‚úÖ [generate_refresh_token] Token Generated Successfully")
        return token
    except Exception as e:
        logger.error(f"‚ùå [generate_refresh_token] Error generating Refresh JWT: {e}")
        raise ValueError(f"Error generating Refresh JWT: {e}")
