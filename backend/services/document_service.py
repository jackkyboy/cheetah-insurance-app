# /Users/apichet/Downloads/cheetah-insurance-app/backend/services/document_service.py
from backend.models.Documents import Documents
from backend import db
import pytesseract
from PIL import Image
import os

# üî• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á Tesseract OCR (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
pytesseract.pytesseract.tesseract_cmd = "/usr/local/bin/tesseract"  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Tesseract ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

# üî• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
UPLOAD_DIR = "/Users/apichet/Downloads/cheetah-insurance-app/backend/uploads/documents"
os.makedirs(UPLOAD_DIR, exist_ok=True)


class DocumentService:
    @staticmethod
    def upload_document(customer_id, document_type, file_path):
        """
        ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥ OCR (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        """
        try:
            if not customer_id:
                raise ValueError("‚ùå Missing required field: customer_id")

            full_file_path = os.path.join(UPLOAD_DIR, file_path)

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            if not os.path.exists(full_file_path):
                raise FileNotFoundError(f"File not found: {full_file_path}")

            # ‚úÖ ‡∏ó‡∏≥ OCR ‡∏ñ‡πâ‡∏≤ document_type ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            ocr_text = None
            if document_type in ["id_card", "driver_license", "car_registration"]:
                ocr_text = DocumentService.perform_ocr(full_file_path)

            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            new_document = Documents(
                customer_id=customer_id,
                document_type=document_type,
                file_path=file_path,
                ocr_data=ocr_text,  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Model
                processed=bool(ocr_text)  # ‡∏´‡∏≤‡∏Å OCR ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ processed=True
            )
            db.session.add(new_document)
            db.session.commit()

            return {
                "document_id": new_document.document_id,
                "customer_id": new_document.customer_id,
                "document_type": new_document.document_type,
                "file_path": new_document.file_path,
                "ocr_data": new_document.ocr_data,
                "uploaded_at": new_document.uploaded_at
            }
        except ValueError as ve:
            db.session.rollback()
            raise ValueError(f"Validation Error: {str(ve)}")
        except Exception as e:
            db.session.rollback()
            raise Exception(f"Error uploading document: {str(e)}")

    @staticmethod
    def perform_ocr(file_path):
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ OCR
        """
        try:
            valid_extensions = {".jpg", ".jpeg", ".png"}
            ext = os.path.splitext(file_path)[-1].lower()
            if ext not in valid_extensions:
                raise ValueError(f"Unsupported file type: {ext}")

            image = Image.open(file_path)
            text = pytesseract.image_to_string(image, lang="tha+eng")
            return text.strip()
        except Exception as e:
            raise Exception(f"Error performing OCR: {str(e)}")

    @staticmethod
    def get_documents_by_customer(customer_id):
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        """
        try:
            if not customer_id:
                raise ValueError("‚ùå Missing customer_id for document fetching")

            documents = Documents.query.filter_by(customer_id=customer_id).all()
            if not documents:
                raise ValueError("No documents found for the given customer_id")

            return [{
                "document_id": doc.document_id,
                "document_type": doc.document_type,
                "file_path": doc.file_path,
                "ocr_data": doc.ocr_data,
                "processed": doc.processed,
                "uploaded_at": doc.uploaded_at
            } for doc in documents]
        except Exception as e:
            raise Exception(f"Error fetching documents: {str(e)}")

    @staticmethod
    def delete_document(document_id):
        """
        ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        """
        try:
            document = Documents.query.get(document_id)
            if not document:
                raise ValueError("Document not found")

            file_path = os.path.join(UPLOAD_DIR, document.file_path)

            # ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if os.path.exists(file_path):
                os.remove(file_path)

            # ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            db.session.delete(document)
            db.session.commit()
            return {"message": "Document deleted successfully"}
        except ValueError as ve:
            db.session.rollback()
            raise ValueError(f"‚ùå Validation Error: {str(ve)}")
        except Exception as e:
            db.session.rollback()
            raise Exception(f"Error deleting document: {str(e)}")
