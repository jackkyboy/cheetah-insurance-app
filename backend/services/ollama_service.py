# /Users/apichet/Downloads/cheetah-insurance-app/backend/services/ollama_service.py
import requests
import logging
import re

OLLAMA_API_URL = "http://127.0.0.1:5000/api/ollama/ask-ollama"

ALLOWED_COMPANIES = [
    "‡∏ä‡∏±‡∏ö‡∏ö‡πå",
    "ERGO",
    "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢",
    "‡∏ß‡∏¥‡∏£‡∏¥‡∏¢‡∏∞",
    "AXA",
    "‡∏ó‡∏¥‡∏û‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢",
    "‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ô‡∏¥‡∏ä",
    "MSIG",
    "‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡∏°‡∏≤‡∏£‡∏µ‡∏ô",
]

def askOllamaWithData(prompt: str) -> str:
    try:
        strict_instruction = (
            "[‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î]\n\n"
            "‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Honda Civic ‡∏õ‡∏µ 2022\n\n"
            f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: {', '.join(ALLOWED_COMPANIES)}\n"
            "‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n"
            "‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ö‡∏µ‡πâ‡∏¢\n"
            "‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏°‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤ (,)\n"
            "‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏î ‡πÜ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î\n"
            "‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡∏à‡∏±‡∏ô (*), ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤, ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏î ‡πÜ\n\n"
            '‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n'
            "‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î"
        )

        full_prompt = f"{prompt.strip()}\n{strict_instruction}"

        response = requests.post(
            OLLAMA_API_URL,
            json={"prompt": full_prompt},
            headers={"Content-Type": "application/json"},
            timeout=60,
        )
        response.raise_for_status()
        data = response.json()
        raw_reply = data.get("response", "").strip()
        reply = sanitizeOllamaReply(raw_reply)
        return reply or "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ"

    except requests.exceptions.RequestException as err:
        logging.error(f"Ollama API request failed: {err}")
        return "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"


def sanitizeOllamaReply(text: str) -> str:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Ollama ‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡πÉ‡∏´‡πâ return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    """
    if not text:
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"

    lines = text.strip().split("\n")
    contains_asterisk = "*" in text
    starts_with_number = bool(re.match(r"^\d+\.", text.strip()))
    has_comma = "," in text
    has_multiple_lines = len(lines) > 1
    multiple_companies = sum(company in text for company in ALLOWED_COMPANIES) > 1
    has_fake_price = contains_fabricated_price(text)

    if (
        has_multiple_lines or
        contains_asterisk or
        starts_with_number or
        has_comma or
        multiple_companies or
        has_fake_price
    ):
        logging.warning("‚ö†Ô∏è ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏Å‡∏é: ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'")
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"

    return text.strip()



def contains_fabricated_price(text: str) -> bool:
    return bool(re.search(r"\d{1,3},\d{3}", text) or re.search(r"\b\d{4,5}\b", text))


def is_valid_premium(low: int, high: int) -> bool:
    return 1000 <= low <= high <= 50000

# (parseOllamaToPackages remains the same unless you want to block responses here too)


def parseOllamaToPackages(rawText: str, defaultType="3+") -> list:
    import re

    companyMapping = {
        "‡∏ä‡∏±‡∏ö‡∏ö‡πå": "chubb",
        "ERGO": "ergo",
        "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢": "mti",
        "‡∏ß‡∏¥‡∏£‡∏¥‡∏¢‡∏∞": "viriyah",
        "AXA": "axa",
        "‡∏ó‡∏¥‡∏û‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢": "dhip",
        "‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ô‡∏¥‡∏ä": "kpi",
        "MSIG": "msig",
        "‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡∏°‡∏≤‡∏£‡∏µ‡∏ô": "tki",
    }

    allowedCompanyNames = set(companyMapping.keys())
    results = []

    lines = [line.strip() for line in rawText.split("\n") if line.strip()]
    currentCompany = None

    for line in lines:
        line = re.sub(r"\(.*?\)", "", line).strip()

        # üß± ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏´‡∏•‡∏±‡∏Å
        main_match = re.match(r"^\*?\s*(?:\d+\.\s*)?([^\d:Ôºö\*]+?):\s*(.+)?$", line)
        if main_match:
            companyName = main_match.group(1).strip()
            descriptionRaw = main_match.group(2).strip() if main_match.group(2) else ""

            if companyName not in allowedCompanyNames or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" in descriptionRaw:
                currentCompany = None
                continue

            currentCompany = companyName
            if descriptionRaw:
                description = re.sub(r"[.„ÄÇ]?$", "", descriptionRaw).strip()
                description = re.sub(r"‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö.*$", "", description, flags=re.IGNORECASE)
                description = re.sub(r"^‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "", description, flags=re.IGNORECASE)

                premiumMatch = re.search(r"(\d{1,3}(?:,\d{3})*)\s*-\s*(\d{1,3}(?:,\d{3})*)", description)
                if not premiumMatch:
                    continue

                low = int(premiumMatch.group(1).replace(",", ""))
                high = int(premiumMatch.group(2).replace(",", ""))
                if not is_valid_premium(low, high):
                    continue

                results.append({
                    "insurance_company": companyName,
                    "code": companyMapping[companyName],
                    "insurance_type": defaultType,
                    "net_premium_range": f"{premiumMatch.group(1)} - {premiumMatch.group(2)}",
                    "description": description,
                })
            continue

        # üîΩ ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏ö‡∏ö - Package: price
        if currentCompany:
            sub_match = re.match(r"^-+\s*([^:]+):\s*(.+)$", line)
            if not sub_match:
                continue

            packageName = sub_match.group(1).strip()
            description = sub_match.group(2).strip()
            description = re.sub(r"[.„ÄÇ]?$", "", description).strip()
            description = re.sub(r"‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö.*$", "", description, flags=re.IGNORECASE)
            description = re.sub(r"^‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "", description, flags=re.IGNORECASE)

            premiumMatch = re.search(r"(\d{1,3}(?:,\d{3})*)\s*-\s*(\d{1,3}(?:,\d{3})*)", description)
            if not premiumMatch:
                continue

            low = int(premiumMatch.group(1).replace(",", ""))
            high = int(premiumMatch.group(2).replace(",", ""))
            if not is_valid_premium(low, high):
                continue

            results.append({
                "insurance_company": currentCompany,
                "code": companyMapping[currentCompany],
                "insurance_type": defaultType,
                "net_premium_range": f"{premiumMatch.group(1)} - {premiumMatch.group(2)}",
                "description": f"{packageName} - {description}",
            })

    # ‚úÖ Flag ‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡πÅ‡∏ï‡πà‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ net_premium ‡∏´‡∏£‡∏∑‡∏≠ package_code ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å BQ)
    for r in results:
        if "net_premium" not in r and "package_code" not in r:
            r["flagged_fake_price"] = True

    return results


