# /Users/apichet/Downloads/cheetah-insurance-app/backend/services/intent_service.py
# backend/services/intent_service.py
# backend/services/intent_service.py
from backend.utils.nlp import parseInsuranceQuery
from google.cloud import bigquery

# ‡πÅ‡∏¢‡∏Å company mapping ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö gallery_routes ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
company_mapping = {
    "ergo": {
        "full_name": "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏≠‡∏≠‡∏£‡πå‡πÇ‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢ (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢) ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)",
        "logo": "/gallery_logos/partners/ERGO-logo.svg"
    },
    "chubb": {
        "full_name": "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ä‡∏±‡∏ö‡∏ö‡πå‡∏™‡∏≤‡∏°‡∏±‡∏Ñ‡∏Ñ‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)",
        "logo": "/gallery_logos/partners/CHUBB-logo.svg"
    },
    "tokio marine": {
        "full_name": "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏Ñ‡∏∏‡πâ‡∏°‡∏†‡∏±‡∏¢‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡∏°‡∏≤‡∏£‡∏µ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢ (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢) ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)",
        "logo": "/gallery_logos/partners/TKI-logo.svg"
    },
    "viriyah": {
        "full_name": "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ß‡∏¥‡∏£‡∏¥‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)",
        "logo": "/gallery_logos/partners/VIRIYAH-logo.svg"
    },
    "mti": {
        "full_name": "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)",
        "logo": "/gallery_logos/partners/MTI-logo.svg"
    }
}

def get_company_info(code: str):
    normalized = (code or "").strip().lower()
    return company_mapping.get(normalized, {
        "full_name": code,
        "logo": "/gallery_logos/partners/default-logo.svg"
    })

insurance_type_map = {
    "1": "1",
    "0": "0",
    "2": "%2+%",
    "2+": "%2+%",
    "2p": "%2+%",
    "3": "%3+%",
    "3+": "%3+%",
    "3p": "%3+%",
}

def handle_user_input(prompt, app):
    parsed = parseInsuranceQuery(prompt)

    if parsed.brand and parsed.model and parsed.year and parsed.insurance_type:
        client = app.extensions["bigquery_config"].client

        # normalize insurance_type: ‡πÅ‡∏õ‡∏•‡∏á p ‚Üí + ‡πÅ‡∏•‡∏∞ lowercase
        ins_type = parsed.insurance_type.lower().replace('p', '+')

        # mapping insurance_type ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö DB pattern
        insurance_type_like = insurance_type_map.get(ins_type, f"%{ins_type}%")

        query = """
            SELECT
                Insurance_company,
                car_brand,
                car_model,
                car_model_year,
                insurance_type,
                repair_type,
                premium
            FROM `cheetah-insurance-broker.insurance.insurance_data_center`
            WHERE TRIM(LOWER(car_brand)) = @brand
              AND TRIM(LOWER(car_model)) = @model
              AND TRIM(CAST(car_model_year AS STRING)) = @year
              AND LOWER(insurance_type) LIKE @insurance_type
            ORDER BY premium ASC
            LIMIT 10
        """

        job_config = bigquery.QueryJobConfig(query_parameters=[
            bigquery.ScalarQueryParameter("brand", "STRING", parsed.brand.lower().strip()),
            bigquery.ScalarQueryParameter("model", "STRING", parsed.model.lower().strip()),
            bigquery.ScalarQueryParameter("year", "STRING", str(parsed.year).strip()),
            bigquery.ScalarQueryParameter("insurance_type", "STRING", insurance_type_like),
        ])

        try:
            rows = [dict(row) for row in client.query(query, job_config=job_config).result()]

            if not rows:
                return {
                    "intent": "insurance_package_search",
                    "query": [parsed.brand, parsed.model, parsed.year, parsed.insurance_type],
                    "response": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô ‡∏•‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠/‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üôè",
                    "results": []
                }

            # ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            for row in rows:
                comp_code = row.get("Insurance_company", "")
                info = get_company_info(comp_code)
                row["insurance_company"] = comp_code
                row["company_full_name"] = info["full_name"]
                row["company_logo"] = info["logo"]
                if "Insurance_company" in row:
                    del row["Insurance_company"]

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 3+
            summary = (
                f"‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏£‡∏ñ {parsed.brand.title()} {parsed.model.title()} ‡∏õ‡∏µ {parsed.year} "
                f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó {parsed.insurance_type}+, ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡πÑ‡∏î‡πâ! "
                "‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏®‡∏†‡∏±‡∏¢‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (TPI), "
                "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 3+ ‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 1 ‡πÅ‡∏•‡∏∞ 2 "
                "‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ "
                f"‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {parsed.brand.title()} {parsed.model.title()} ‡∏õ‡∏µ {parsed.year} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó {parsed.insurance_type}+ "
                "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏®‡∏†‡∏±‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á ‡πÄ‡∏ä‡πà‡∏ô:"
            )
            company_texts = []
            for i, row in enumerate(rows[:5], 1):
                comp_name = row.get("company_full_name", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô")
                premium = row.get("premium", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤")
                cover_note = "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á 3 ‡∏Ñ‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (Driver, Passenger ‡πÅ‡∏•‡∏∞ Pedestrian)"
                company_texts.append(f"{i}. {comp_name} - {cover_note} * ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {premium} ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏õ‡∏µ")

            full_response = summary + " " + " ".join(company_texts) + \
                " ‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏î‡∏π‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ"

            return {
                "intent": "insurance_package_search",
                "query": [parsed.brand, parsed.model, parsed.year, parsed.insurance_type],
                "response": full_response,
                "results": rows
            }

        except Exception as e:
            app.logger.error(f"‚ùå BigQuery query failed: {e}")
            return {
                "response": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                "intent": "error",
                "error": str(e)
            }

    return {
        "response": "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô",
        "intent": "fallback"
    }
