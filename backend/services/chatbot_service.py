import openai
from google.cloud import bigquery
import os
import logging

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# ‚úÖ ‡πÉ‡∏ä‡πâ global ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏≤‡∏™‡∏≠‡∏∑‡πà‡∏ô reuse
bigquery_client = None

def get_bigquery_client():
    """
    ‡πÉ‡∏ä‡πâ Singleton Pattern ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á BigQuery Client ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
    """
    global bigquery_client
    if bigquery_client is None:
        try:
            bigquery_client = bigquery.Client(project="cheetah-insurance-broker")  # üîß ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            logger.debug("‚úÖ BigQuery client created for project: cheetah-insurance-broker")
        except Exception as e:
            logger.error(f"‚ùå Failed to create BigQuery client: {e}")
            raise
    return bigquery_client


def query_bigquery(user_query):
    """
    üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å BigQuery
    ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏ï‡∏≠‡∏ö
    ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡πÉ‡∏´‡πâ GPT-4 ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô
    """
    try:
        client = get_bigquery_client()
        query = """
        SELECT response_text FROM `cheetah-insurance-broker.chatbot_responses`
        WHERE LOWER(question) LIKE @user_query
        LIMIT 1
        """
        query_params = [
            bigquery.ScalarQueryParameter("user_query", "STRING", f"%{user_query.lower()}%")
        ]
        job_config = bigquery.QueryJobConfig(query_parameters=query_params)
        query_job = client.query(query, job_config=job_config)
        results = query_job.result()

        for row in results:
            return row["response_text"]
        return None
    except Exception as e:
        logger.error(f"‚ùå Error querying BigQuery: {e}")
        return None


def get_chatbot_response(user_query):
    """
    ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô BigQuery ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ
    ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡πÉ‡∏ä‡πâ GPT-4 ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö
    """
    bigquery_response = query_bigquery(user_query)
    if bigquery_response:
        return bigquery_response

    # üß† ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡πÉ‡∏ä‡πâ GPT-4 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    prompt = f"""
    ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢: "{user_query}"
    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢."},
                {"role": "user", "content": prompt}
            ]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"‚ùå OpenAI API Error: {e}")
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"


def train_chatbot(question, response):
    """
    ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ BigQuery ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Chatbot ‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
    """
    try:
        client = get_bigquery_client()
        query = """
        INSERT INTO `cheetah-insurance-broker.chatbot_responses` (question, response_text)
        VALUES (@question, @response)
        """
        query_params = [
            bigquery.ScalarQueryParameter("question", "STRING", question.lower()),
            bigquery.ScalarQueryParameter("response", "STRING", response),
        ]
        job_config = bigquery.QueryJobConfig(query_parameters=query_params)
        query_job = client.query(query, job_config=job_config)
        query_job.result()  # Execute the query

        logger.info(f"‚úÖ Training Data Added: {question} ‚Üí {response}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error inserting training data: {e}")
        return False
