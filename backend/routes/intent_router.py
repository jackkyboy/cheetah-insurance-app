

# ‚úÖ /Users/apichet/Downloads/cheetah-insurance-app/backend/routes/intent_router.py
# /backend/routes/intent_router.py

# /backend/routes/intent_router.py

from flask import Blueprint, request, jsonify, current_app
from google.cloud import bigquery
from backend.services.bigquery_service import BigQueryService
from backend.services.ollama_service import askOllamaWithData, parseOllamaToPackages

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î config project/location ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
BQ_PROJECT_ID = "cheetah-insurance-broker"
BQ_LOCATION = "asia-southeast1"

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance BigQueryService
bq_service = BigQueryService(project_id=BQ_PROJECT_ID, location=BQ_LOCATION)

intent_bp = Blueprint("intent_router", __name__, url_prefix="/api/intent")


# üîç ‡πÇ‡∏´‡∏•‡∏î package_code ‡∏à‡∏≤‡∏Å BigQuery
def get_valid_package_codes():
    try:
        query = """
            SELECT DISTINCT package_code
            FROM `cheetah-insurance-broker.insurance.insurance_data_center`
        """
        result = bq_service.execute_query(query)
        return {row["package_code"].strip().lower() for row in result if row.get("package_code")}
    except Exception as e:
        current_app.logger.error(f"‚ùå Failed to load valid package codes: {e}")
        return set()


# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ description ‡∏à‡∏≤‡∏Å Ollama ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö package_code ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô BigQuery ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def validate_ollama_packages(packages_from_ollama, valid_package_codes: set[str]):
    matched = []
    unmatched = []

    for pkg in packages_from_ollama:
        desc = pkg.get("description", "").lower()
        has_match = any(code in desc for code in valid_package_codes)
        if has_match:
            matched.append(pkg)
        else:
            unmatched.append(pkg)
    return matched, unmatched


@intent_bp.route("/handle", methods=["POST"])
def handle_intent():
    try:
        data = request.get_json(force=True)
        prompt = (data.get("prompt") or "").strip()

        if not prompt:
            current_app.logger.warning("Missing prompt in request")
            return jsonify({"error": "Missing prompt"}), 400

        current_app.logger.debug(f"üì© Prompt received: {prompt}")

        from backend.utils.nlp import parseInsuranceQuery

        parsed = parseInsuranceQuery(prompt)
        brand = getattr(parsed, "brand", None)
        model = getattr(parsed, "model", None)
        year = getattr(parsed, "year", None)
        insurance_type = getattr(parsed, "insurance_type", None)

        # ‚úÖ CASE 1: ‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å BigQuery ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        if brand and model and year and insurance_type:
            try:
                query = """
                    SELECT Insurance_company, car_brand, car_model, car_model_year,
                           insurance_type, repair_type, premium
                    FROM `cheetah-insurance-broker.insurance.insurance_data_center`
                    WHERE TRIM(LOWER(car_brand)) = @brand
                      AND TRIM(LOWER(car_model)) = @model
                      AND TRIM(CAST(car_model_year AS STRING)) = @year
                      AND LOWER(insurance_type) LIKE @insurance_type
                    ORDER BY premium ASC
                    LIMIT 10
                """
                parameters = [
                    bigquery.ScalarQueryParameter("brand", "STRING", brand.lower()),
                    bigquery.ScalarQueryParameter("model", "STRING", model.lower()),
                    bigquery.ScalarQueryParameter("year", "STRING", year),
                    bigquery.ScalarQueryParameter("insurance_type", "STRING", f"%{insurance_type.lower()}%"),
                ]
                results, status = bq_service.execute_query_with_count(query, parameters)
                if status == 200 and results.get("data"):
                    return jsonify({
                        "intent": "insurance_package_search",
                        "response": f"‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô {len(results['data'])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö {brand} {model} ‡∏õ‡∏µ {year}",
                        "results": results["data"],
                    })

            except Exception as e:
                current_app.logger.error(f"BigQuery error: {e}")
                return jsonify({
                    "intent": "error",
                    "response": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    "error": str(e),
                }), 500

        # ‚úÖ CASE 2: ‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Ollama (fallback)
        try:
            ollama_resp = askOllamaWithData(prompt)
            packages = parseOllamaToPackages(ollama_resp)

            # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å BigQuery
            valid_codes = get_valid_package_codes()

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏Ç‡∏≠‡∏á Ollama ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            verified_packages, unmatched_packages = validate_ollama_packages(packages, valid_codes)

            if not verified_packages:
                text_resp = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏£‡∏±‡∏ö üôè"
            else:
                text_resp = f"‡∏û‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á {len(verified_packages)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"

                # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å BigQuery ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å verified packages
                companies_in_real_data = {
                    pkg.get("insurance_company", "").strip().lower()
                    for pkg in verified_packages
                }

                # ‚úÖ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà Ollama ‡∏≠‡∏≤‡∏à‡∏ï‡∏≠‡∏ö
                known_companies = [
                    "‡∏ä‡∏±‡∏ö‡∏ö‡πå", "ergo", "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢", "‡∏ß‡∏¥‡∏£‡∏¥‡∏¢‡∏∞",
                    "axa", "‡∏ó‡∏¥‡∏û‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢", "‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ô‡∏¥‡∏ä",
                    "msig", "‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡∏°‡∏≤‡∏£‡∏µ‡∏ô"
                ]

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                missing_companies = [
                    name for name in known_companies if name.lower() not in companies_in_real_data
                ]

                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                if missing_companies:
                    fallback_lines = [f"* {name}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" for name in missing_companies]
                    text_resp += "\n\n" + "\n".join(fallback_lines)


            return jsonify({
                "intent": "insurance_package_search_fallback",
                "response": text_resp,
                "results": verified_packages,
                "unmatched": unmatched_packages,
                "raw": ollama_resp,
            })

        except Exception as e:
            current_app.logger.error(f"Ollama error: {e}")
            return jsonify({
                "intent": "error",
                "response": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°",
                "error": str(e),
            }), 500

    except Exception as e:
        current_app.logger.exception("‚ùå Intent handling failed")
        return jsonify({
            "error": "Internal server error",
            "details": str(e),
        }), 500
