# /Users/apichet/Downloads/cheetah-insurance-app/backend/routes/chatbot_routes.py

import os
import time
from flask import Blueprint, request, jsonify
from dotenv import load_dotenv
from openai import OpenAI

# === Flask Blueprint ===
chatbot_bp = Blueprint("chatbot", __name__, url_prefix="/api/chatbot")

# === Load API Key ===
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# === Upload CSV ===
csv_path = "/Users/apichet/Downloads/insurance_data.csv"
with open(csv_path, "rb") as f:
    uploaded_file = client.files.create(file=f, purpose="assistants")
file_id = uploaded_file.id
print(f"üìÇ Uploaded file ID: {file_id}")

# === Create Assistant ===
assistant = client.beta.assistants.create(
    name="‡∏û‡∏µ‡πà‡πÄ‡∏™‡∏∑‡∏≠‡∏ä‡∏µ‡∏ï‡πâ‡∏≤",
    instructions="""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ä‡∏∑‡πà‡∏≠ '‡∏û‡∏µ‡πà‡πÄ‡∏™‡∏∑‡∏≠‡∏ä‡∏µ‡∏ï‡πâ‡∏≤' üêÜ
‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ['Insurance_company', 'package_code', 'car_brand', 'car_model', 'car_submodel',
'car_model_year', 'insurance_type', 'repair_type', 'premium']

‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
1. ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ pandas:
   import pandas as pd
   df = pd.read_csv("/mnt/data/insurance_data.csv")
2. ‡πÅ‡∏™‡∏î‡∏á df.head() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ
3. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô:
   - "Yaris ‡∏õ‡∏µ 2022 ‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏ã‡πà‡∏≠‡∏°‡∏´‡πâ‡∏≤‡∏á" ‚Üí brand=TOYOTA, model=YARIS, year=2022, insurance_type=1, repair_type='‡∏ã‡πà‡∏≠‡∏°‡∏´‡πâ‡∏≤‡∏á'
4. ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô query ‡∏î‡πâ‡∏ß‡∏¢ pandas:
   result = df[
       (df['car_brand'].str.lower() == 'toyota') &
       (df['car_model'].str.lower() == 'yaris') &
       (df['car_model_year'] == 2022) &
       (df['insurance_type'] == 1) &
       (df['repair_type'] == '‡∏ã‡πà‡∏≠‡∏°‡∏´‡πâ‡∏≤‡∏á')
   ]
5. ‡∏ñ‡πâ‡∏≤ result ‡∏ß‡πà‡∏≤‡∏á:
   print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
6. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠:
   print(result[['car_submodel', 'premium', 'repair_type']])
‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î! ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ print(...) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
""",
    tools=[{"type": "code_interpreter"}],
    model="gpt-4o"
)
assistant_id = assistant.id
print(f"‚úÖ Assistant ID: {assistant_id}")

# === Create Thread ===
thread = client.beta.threads.create()
thread_id = thread.id
print(f"üßµ Thread ID: {thread_id}")

# === Flask API Endpoint ===
@chatbot_bp.route("/ask", methods=["POST"])
def ask_from_api():
    try:
        question = request.json.get("message", "")
        if not question:
            return jsonify({"error": "No message provided"}), 400

        print(f"üí¨ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å API: {question}")

        # ‡∏™‡πà‡∏á message ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=question,
            attachments=[
                {
                    "file_id": file_id,
                    "tools": [{"type": "code_interpreter"}]
                }
            ]
        )

        # ‡∏£‡∏±‡∏ô Assistant
        run = client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=assistant_id,
            instructions="‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ô‡∏µ‡πâ ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏≠‡∏á"
        )

        # Poll ‡∏£‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        start_time = time.time()
        while True:
            run_status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
            if run_status.status in ['completed', 'failed']:
                break
            if time.time() - start_time > 30:
                return jsonify({"error": "‚è∞ Timeout"}), 408
            time.sleep(2)

        messages = client.beta.threads.messages.list(thread_id=thread_id)
        for m in messages.data:
            if m.role == "assistant":
                for part in m.content:
                    if hasattr(part, "text") and part.text.value.strip():
                        return jsonify({"answer": part.text.value.strip()})

        return jsonify({"error": "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Assistant"}), 500

    except Exception as e:
        return jsonify({"error": str(e)}), 500
