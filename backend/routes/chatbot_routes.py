# /Users/apichet/Downloads/cheetah-insurance-app/backend/routes/chatbot_routes.py
# /backend/routes/chatbot_routes.py
import re
import requests
from flask import Blueprint, request, jsonify
from backend.routes.bigquery_routes import map_insurance_type_group

chatbot_bp = Blueprint("chatbot", __name__, url_prefix="/api/chatbot")


def parse_insurance_query(message):
    brand_match = re.search(r"(toyota|honda|nissan|isuzu|mazda|ford|byd|mg)", message, re.IGNORECASE)
    model_match = re.search(r"(yaris|civic|dmax|march|cx[- ]?5|ranger|atto|zs)", message, re.IGNORECASE)
    year_match = re.search(r"(20\d{2})", message)
    type_match = re.search(r"(‡∏ä‡∏±‡πâ‡∏ô\s?1|‡∏ä‡∏±‡πâ‡∏ô\s?2\+?|‡∏ä‡∏±‡πâ‡∏ô\s?3\+?|‡∏ä‡∏±‡πâ‡∏ô\s?3)", message)
    repair_match = re.search(r"(‡∏ã‡πà‡∏≠‡∏°‡∏´‡πâ‡∏≤‡∏á|‡∏ã‡πà‡∏≠‡∏°‡∏≠‡∏π‡πà)", message)

    if not (brand_match and model_match and year_match and type_match and repair_match):
        return None

    return {
        "car_brand": brand_match.group(1).upper(),
        "car_model": model_match.group(1).upper().replace(" ", "").replace("-", ""),
        "car_model_year": int(year_match.group(1)),
        "insurance_type": type_match.group(1).replace("‡∏ä‡∏±‡πâ‡∏ô", "").strip(),
        "repair_type": "‡∏ã‡πà‡∏≠‡∏°‡∏´‡πâ‡∏≤‡∏á" if "‡∏´‡πâ‡∏≤‡∏á" in repair_match.group(1) else "‡∏ã‡πà‡∏≠‡∏°‡∏≠‡∏π‡πà",
    }


@chatbot_bp.route("/ask", methods=["POST"])
def ask_chatbot():
    try:
        message = request.json.get("message", "")
        if not message:
            return jsonify({"error": "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"}), 400

        print(f"üì© ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {message}")
        parsed = parse_insurance_query(message)
        if not parsed:
            return jsonify({"answer": "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ ‡∏£‡∏∏‡πà‡∏ô ‡∏õ‡∏µ ‡∏ä‡∏±‡πâ‡∏ô ‡∏ã‡πà‡∏≠‡∏°‡∏≠‡∏π‡πà/‡∏´‡πâ‡∏≤‡∏á"}), 200

        insurance_type_group = map_insurance_type_group(parsed["insurance_type"])
        payload = {
            "car_brand": parsed["car_brand"],
            "car_model": parsed["car_model"],
            "car_model_year": str(parsed["car_model_year"]),
            "insurance_type": parsed["insurance_type"],
            "car_submodel": "",
            "page": 1,
            "limit": 5
        }

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ endpoint ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Flask ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡πà‡∏≤‡∏ô HTTP ‡∏ñ‡πâ‡∏≤‡πÅ‡∏¢‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™
        from backend.routes.bigquery_routes import compare_insurance
        with request.environ:
            resp = compare_insurance()
            return resp

    except Exception as e:
        return jsonify({"error": f"‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á: {str(e)}"}), 500
