"""empty message

Revision ID: ad484a8e0a13
Revises: 
Create Date: 2025-02-21 12:26:28.172449

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ad484a8e0a13'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Admins',
    sa.Column('admin_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('refresh_token', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('admin_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('Coupons',
    sa.Column('coupon_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('code', sa.String(length=50), nullable=False),
    sa.Column('discount_percentage', sa.Float(), nullable=False),
    sa.Column('expiration_date', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('coupon_id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('Customers',
    sa.Column('customer_id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for the Customers table'),
    sa.Column('first_name', sa.String(length=50), nullable=False, comment="Customer's first name"),
    sa.Column('last_name', sa.String(length=50), nullable=False, comment="Customer's last name"),
    sa.Column('email', sa.String(length=255), nullable=False, comment="Customer's unique email address"),
    sa.Column('phone_number', sa.String(length=20), nullable=True, comment="Customer's phone number"),
    sa.Column('address', sa.Text(), nullable=True, comment="Customer's physical address"),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Timestamp when the customer was created'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Timestamp when the customer was last updated'),
    sa.PrimaryKeyConstraint('customer_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('Insurance_Companies',
    sa.Column('company_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('company_code', sa.String(length=50), nullable=False, comment='Unique company code'),
    sa.Column('company_name_th', sa.String(length=255), nullable=False, comment='Company name in Thai'),
    sa.Column('company_name_en', sa.String(length=255), nullable=False, comment='Company name in English'),
    sa.Column('company_symbol', sa.String(length=50), nullable=False, comment='Company symbol'),
    sa.Column('company_address1', sa.Text(), nullable=False, comment='Company main address'),
    sa.Column('company_postcode', sa.String(length=10), nullable=False, comment='Company postcode'),
    sa.Column('company_tax_id', sa.String(length=50), nullable=False, comment='Company Tax ID'),
    sa.Column('company_tel', sa.String(length=50), nullable=False, comment='Company contact telephone'),
    sa.Column('company_email', sa.String(length=255), nullable=False, comment='Company contact email'),
    sa.Column('company_claim_contact', sa.String(length=50), nullable=False, comment='Company claim contact info'),
    sa.Column('api_base_url', sa.String(length=255), nullable=False, comment='API Base URL'),
    sa.Column('api_token', sa.String(length=255), nullable=True, comment='API Authentication Token'),
    sa.Column('token_expiration', sa.DateTime(), nullable=True, comment='Token Expiration Time'),
    sa.Column('last_token_refresh', sa.DateTime(), nullable=True, comment='Last Token Refresh Timestamp'),
    sa.Column('agent_code', sa.String(length=50), nullable=False, comment='API Agent Code'),
    sa.Column('partner_code', sa.String(length=50), nullable=False, comment='API Partner Code'),
    sa.PrimaryKeyConstraint('company_id'),
    sa.UniqueConstraint('company_code'),
    sa.UniqueConstraint('company_tax_id')
    )
    op.create_table('insurance_data_center',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for insurance data center'),
    sa.Column('car_brand', sa.String(length=100), nullable=False, comment='Brand of the car'),
    sa.Column('insurance_type', sa.String(length=100), nullable=False, comment='Type of insurance'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Record creation timestamp'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('CarInfo',
    sa.Column('car_id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for CarInfo table'),
    sa.Column('car_brand', sa.String(length=100), nullable=False, comment='Brand of the car (e.g., Honda)'),
    sa.Column('car_model', sa.String(length=100), nullable=False, comment='Model of the car (e.g., Civic)'),
    sa.Column('car_year', sa.String(length=4), nullable=False, comment='Year the car was manufactured'),
    sa.Column('car_submodel', sa.String(length=100), nullable=True, comment='Submodel of the car (optional)'),
    sa.Column('customer_id', sa.Integer(), nullable=False, comment='Foreign key to Customers table'),
    sa.ForeignKeyConstraint(['customer_id'], ['Customers.customer_id'], ),
    sa.PrimaryKeyConstraint('car_id')
    )
    op.create_table('Car_Insurance_Packages',
    sa.Column('package_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('car_brand', sa.String(length=100), nullable=False),
    sa.Column('car_model', sa.String(length=100), nullable=False),
    sa.Column('car_model_year', sa.String(length=4), nullable=False),
    sa.Column('car_submodel', sa.String(length=255), nullable=False),
    sa.Column('premium', sa.Float(), nullable=False),
    sa.Column('cmi_amount', sa.Float(), nullable=True),
    sa.Column('liability_per_person', sa.Float(), nullable=True),
    sa.Column('liability_per_event', sa.Float(), nullable=True),
    sa.Column('liability_property', sa.Float(), nullable=True),
    sa.Column('liability_deductible', sa.Float(), nullable=True),
    sa.Column('own_damage', sa.Float(), nullable=True),
    sa.Column('own_theft_fire_damage', sa.Float(), nullable=True),
    sa.Column('coverage_driver_death', sa.Float(), nullable=True),
    sa.Column('coverage_passenger_death', sa.Float(), nullable=True),
    sa.Column('coverage_medical_expense', sa.Float(), nullable=True),
    sa.Column('coverage_bail_bond', sa.Float(), nullable=True),
    sa.Column('repair_type', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['Insurance_Companies.company_id'], ),
    sa.PrimaryKeyConstraint('package_id')
    )
    with op.batch_alter_table('Car_Insurance_Packages', schema=None) as batch_op:
        batch_op.create_index('idx_car_brand', ['car_brand'], unique=False)
        batch_op.create_index('idx_car_model', ['car_model'], unique=False)
        batch_op.create_index('idx_car_model_year', ['car_model_year'], unique=False)
        batch_op.create_index('idx_search', ['car_brand', 'car_model', 'car_model_year', 'car_submodel'], unique=False)

    op.create_table('Customer_Coupons',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('coupon_id', sa.Integer(), nullable=False),
    sa.Column('assigned_date', sa.DateTime(), nullable=True),
    sa.Column('redeemed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['coupon_id'], ['Coupons.coupon_id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['Customers.customer_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Customer_Info',
    sa.Column('info_id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for Customer_Info table'),
    sa.Column('customer_id', sa.Integer(), nullable=False, comment='Foreign key to Customers table'),
    sa.Column('id_card_number', sa.String(length=20), nullable=True, comment="Customer's ID card number"),
    sa.Column('driver_license_number', sa.String(length=20), nullable=True, comment="Customer's driver's license number"),
    sa.Column('vehicle_registration', sa.String(length=50), nullable=True, comment="Customer's vehicle registration"),
    sa.Column('policy_number', sa.String(length=50), nullable=True, comment="Customer's previous policy number"),
    sa.Column('extracted_from', sa.String(length=50), nullable=False, comment='Source of data extraction (e.g., OCR, manual input)'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Record update timestamp'),
    sa.ForeignKeyConstraint(['customer_id'], ['Customers.customer_id'], ),
    sa.PrimaryKeyConstraint('info_id')
    )
    op.create_table('Documents',
    sa.Column('document_id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for Documents table'),
    sa.Column('customer_id', sa.Integer(), nullable=False, comment='Foreign key to Customers table'),
    sa.Column('document_type', sa.String(length=100), nullable=False, comment='Type of the document (e.g., ID_CARD, CAR_REGISTRATION)'),
    sa.Column('file_path', sa.String(length=255), nullable=False, comment='File path where the document is stored'),
    sa.Column('ocr_data', sa.JSON(), nullable=True, comment='OCR data extracted from the document, if available'),
    sa.Column('processed', sa.Boolean(), nullable=True, comment='Indicates if OCR processing has been completed'),
    sa.Column('uploaded_at', sa.DateTime(), nullable=True, comment='Timestamp when the document was uploaded'),
    sa.ForeignKeyConstraint(['customer_id'], ['Customers.customer_id'], ),
    sa.PrimaryKeyConstraint('document_id')
    )
    op.create_table('Payments',
    sa.Column('payment_id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for Payments table'),
    sa.Column('order_id', sa.String(length=100), nullable=False, comment='Unique order ID generated for payment'),
    sa.Column('customer_id', sa.Integer(), nullable=False, comment='Foreign key to Customers table'),
    sa.Column('package_id', sa.Integer(), nullable=True, comment='Foreign key to selected insurance package (nullable for custom payments)'),
    sa.Column('amount', sa.Float(), nullable=False, comment='Total payment amount'),
    sa.Column('premium', sa.Float(), nullable=True, comment='Base insurance premium amount'),
    sa.Column('duty', sa.Float(), nullable=True, comment='Stamp duty'),
    sa.Column('vat', sa.Float(), nullable=True, comment='VAT (7%)'),
    sa.Column('total_price', sa.Float(), nullable=True, comment='Final total price including VAT, duty, and add-ons'),
    sa.Column('add_ons', sa.Text(), nullable=True, comment='Selected add-ons as comma-separated IDs'),
    sa.Column('coupon_code', sa.String(length=50), nullable=True, comment='Coupon code applied'),
    sa.Column('coverage_start_date', sa.Date(), nullable=True, comment='Coverage start date'),
    sa.Column('coverage_start_time', sa.Time(), nullable=True, comment='Coverage start time'),
    sa.Column('insurance_company', sa.String(length=255), nullable=True, comment='Selected insurance company name'),
    sa.Column('insurance_type', sa.String(length=50), nullable=True, comment='Insurance type (e.g., ชั้น 1, ชั้น 2+)'),
    sa.Column('car_brand', sa.String(length=100), nullable=True, comment='Car brand'),
    sa.Column('car_model', sa.String(length=100), nullable=True, comment='Car model'),
    sa.Column('car_submodel', sa.String(length=255), nullable=True, comment='Car submodel'),
    sa.Column('car_year', sa.Integer(), nullable=True, comment='Car year'),
    sa.Column('payment_status', sa.String(length=50), nullable=True, comment='Payment status: pending, success, failed'),
    sa.Column('payment_reference', sa.String(length=255), nullable=True, comment='Reference ID from payment gateway'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Timestamp when the payment was created'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Timestamp when the payment was last updated'),
    sa.ForeignKeyConstraint(['customer_id'], ['Customers.customer_id'], ),
    sa.PrimaryKeyConstraint('payment_id'),
    sa.UniqueConstraint('order_id')
    )
    op.create_table('Policy_Requests',
    sa.Column('request_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('reference_no', sa.String(length=100), nullable=False),
    sa.Column('policy_status', sa.String(length=10), nullable=False),
    sa.Column('effective_date', sa.DateTime(), nullable=False),
    sa.Column('expire_date', sa.DateTime(), nullable=False),
    sa.Column('premium', sa.Float(), nullable=False),
    sa.Column('total_premium', sa.Float(), nullable=False),
    sa.Column('transaction_type', sa.String(length=50), nullable=False),
    sa.Column('policy_response', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['Insurance_Companies.company_id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['Customers.customer_id'], ),
    sa.PrimaryKeyConstraint('request_id'),
    sa.UniqueConstraint('reference_no')
    )
    op.create_table('Users',
    sa.Column('user_id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key for Users table'),
    sa.Column('customer_id', sa.Integer(), nullable=False, comment='Foreign key referencing Customers'),
    sa.Column('email', sa.String(length=255), nullable=False, comment="User's email address (must be unique)"),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='Hashed password for secure authentication'),
    sa.Column('profile_picture', sa.String(length=255), nullable=True, comment="Path to user's profile picture (if any)"),
    sa.Column('bio', sa.Text(), nullable=True, comment='Short biography or description of the user'),
    sa.Column('theme_color', sa.String(length=7), nullable=True, comment="Hexadecimal code for user's profile theme color"),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Timestamp for when the user was created'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Timestamp for last profile update'),
    sa.Column('role', sa.String(length=50), nullable=True, comment='User role (e.g. admin, user)'),
    sa.ForeignKeyConstraint(['customer_id'], ['Customers.customer_id'], ),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('Customer_Policies',
    sa.Column('policy_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('package_id', sa.Integer(), nullable=False),
    sa.Column('request_date', sa.DateTime(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('policy_number', sa.String(length=100), nullable=True),
    sa.Column('insurance_company_response', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['Customers.customer_id'], ),
    sa.ForeignKeyConstraint(['package_id'], ['Car_Insurance_Packages.package_id'], ),
    sa.PrimaryKeyConstraint('policy_id')
    )
    op.create_table('insurance_preparations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('insured_info', sa.JSON(), nullable=True),
    sa.Column('motor_info', sa.JSON(), nullable=True),
    sa.Column('policy_info', sa.JSON(), nullable=True),
    sa.Column('driver_info', sa.JSON(), nullable=True),
    sa.Column('beneficiary_info', sa.JSON(), nullable=True),
    sa.Column('coverage_info', sa.JSON(), nullable=True),
    sa.Column('consent_info', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('insurance_reviews',
    sa.Column('review_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('package_id', sa.Integer(), nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('review_date', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['Insurance_Companies.company_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['customer_id'], ['Customers.customer_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['package_id'], ['Car_Insurance_Packages.package_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('review_id')
    )
    op.create_table('Claim_Issues',
    sa.Column('issue_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('policy_id', sa.Integer(), nullable=True, comment='Foreign key referencing Customer_Policies. Nullable for general claims.'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Foreign key referencing Users'),
    sa.Column('issue_description', sa.Text(), nullable=False, comment='Detailed description of the issue'),
    sa.Column('issue_date', sa.DateTime(), nullable=True, comment='Date when the issue was reported'),
    sa.Column('status', sa.String(length=50), nullable=True, comment='Status of the issue (e.g., pending, resolved, escalated)'),
    sa.Column('insurance_response', sa.Text(), nullable=True, comment='Response from the insurance company'),
    sa.Column('resolution_date', sa.DateTime(), nullable=True, comment='Date when the issue was resolved'),
    sa.ForeignKeyConstraint(['policy_id'], ['Customer_Policies.policy_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['Users.user_id'], ),
    sa.PrimaryKeyConstraint('issue_id')
    )
    op.create_table('Claims',
    sa.Column('claim_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('policy_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('claim_date', sa.DateTime(), nullable=True),
    sa.Column('claim_status', sa.String(length=50), nullable=True),
    sa.Column('claim_amount', sa.Float(), nullable=True),
    sa.Column('claim_description', sa.Text(), nullable=False),
    sa.Column('resolution_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['policy_id'], ['Customer_Policies.policy_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['Users.user_id'], ),
    sa.PrimaryKeyConstraint('claim_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Claims')
    op.drop_table('Claim_Issues')
    op.drop_table('insurance_reviews')
    op.drop_table('insurance_preparations')
    op.drop_table('Customer_Policies')
    op.drop_table('Users')
    op.drop_table('Policy_Requests')
    op.drop_table('Payments')
    op.drop_table('Documents')
    op.drop_table('Customer_Info')
    op.drop_table('Customer_Coupons')
    with op.batch_alter_table('Car_Insurance_Packages', schema=None) as batch_op:
        batch_op.drop_index('idx_search')
        batch_op.drop_index('idx_car_model_year')
        batch_op.drop_index('idx_car_model')
        batch_op.drop_index('idx_car_brand')

    op.drop_table('Car_Insurance_Packages')
    op.drop_table('CarInfo')
    op.drop_table('insurance_data_center')
    op.drop_table('Insurance_Companies')
    op.drop_table('Customers')
    op.drop_table('Coupons')
    op.drop_table('Admins')
    # ### end Alembic commands ###
